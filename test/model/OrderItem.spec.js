/*
 * Gunbot REST API
 * The Gunbot REST API enables you to programmatically interact with Gunbot, a self hosted trading bot for crypto, ETFs and stocks, allowing automation and integration with your own applications and services. It gives you a single API with which you can control trading operations on many exchanges.  The API accepts and returns data in JSON format. It uses standard HTTP response codes to indicate request outcomes: - **200 OK**: The request was successful. - **400 Bad Request**: The request was invalid or cannot be processed. - **401 Unauthorized**: Authentication failed, or the user lacks necessary permissions. - **500 Internal Server Error**: A server-side error occurred.  **Gunbot Workflow:** To automate trading for any pair using the API, follow these steps: 1. Add the trading pair to the configuration with a valid strategy. 2. Start the core to activate trading operations. After completing these steps, you can access API endpoints for market data and trading actions. Gunbot will actively monitor and execute strategies for the specified pairs.  **Encryption Helpers:** Gunbot uses password encryption. Refer to the original documentation for encryption helper snippets in JavaScript (Browser/Node.js), Bash, and Python. 
 *
 * OpenAPI spec version: v1
 * Contact: support@gunbot.freshdesk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GunbotRestApi);
  }
}(this, function(expect, GunbotRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderItem', function() {
      beforeEach(function() {
        instance = new GunbotRestApi.OrderItem();
      });

      it('should create an instance of OrderItem', function() {
        // TODO: update the code to test OrderItem
        expect(instance).to.be.a(GunbotRestApi.OrderItem);
      });

      it('should have the property time (base name: "time")', function() {
        // TODO: update the code to test the property time
        expect(instance).to.have.property('time');
        // expect(instance.time).to.be(expectedValueLiteral);
      });

      it('should have the property pair (base name: "pair")', function() {
        // TODO: update the code to test the property pair
        expect(instance).to.have.property('pair');
        // expect(instance.pair).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property rate (base name: "rate")', function() {
        // TODO: update the code to test the property rate
        expect(instance).to.have.property('rate');
        // expect(instance.rate).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property cost (base name: "cost")', function() {
        // TODO: update the code to test the property cost
        expect(instance).to.have.property('cost');
        // expect(instance.cost).to.be(expectedValueLiteral);
      });

      it('should have the property toCancel (base name: "toCancel")', function() {
        // TODO: update the code to test the property toCancel
        expect(instance).to.have.property('toCancel');
        // expect(instance.toCancel).to.be(expectedValueLiteral);
      });

      it('should have the property fees (base name: "fees")', function() {
        // TODO: update the code to test the property fees
        expect(instance).to.have.property('fees');
        // expect(instance.fees).to.be(expectedValueLiteral);
      });

      it('should have the property baseValue (base name: "baseValue")', function() {
        // TODO: update the code to test the property baseValue
        expect(instance).to.have.property('baseValue');
        // expect(instance.baseValue).to.be(expectedValueLiteral);
      });

      it('should have the property costProceed (base name: "costProceed")', function() {
        // TODO: update the code to test the property costProceed
        expect(instance).to.have.property('costProceed');
        // expect(instance.costProceed).to.be(expectedValueLiteral);
      });

      it('should have the property averagePrice (base name: "averagePrice")', function() {
        // TODO: update the code to test the property averagePrice
        expect(instance).to.have.property('averagePrice');
        // expect(instance.averagePrice).to.be(expectedValueLiteral);
      });

      it('should have the property pnlPrice (base name: "pnlPrice")', function() {
        // TODO: update the code to test the property pnlPrice
        expect(instance).to.have.property('pnlPrice');
        // expect(instance.pnlPrice).to.be(expectedValueLiteral);
      });

      it('should have the property balance (base name: "balance")', function() {
        // TODO: update the code to test the property balance
        expect(instance).to.have.property('balance');
        // expect(instance.balance).to.be(expectedValueLiteral);
      });

      it('should have the property baseBalance (base name: "baseBalance")', function() {
        // TODO: update the code to test the property baseBalance
        expect(instance).to.have.property('baseBalance');
        // expect(instance.baseBalance).to.be(expectedValueLiteral);
      });

      it('should have the property inventoryCost (base name: "inventory_cost")', function() {
        // TODO: update the code to test the property inventoryCost
        expect(instance).to.have.property('inventoryCost');
        // expect(instance.inventoryCost).to.be(expectedValueLiteral);
      });

      it('should have the property ABP (base name: "ABP")', function() {
        // TODO: update the code to test the property ABP
        expect(instance).to.have.property('ABP');
        // expect(instance.ABP).to.be(expectedValueLiteral);
      });

      it('should have the property pnl (base name: "pnl")', function() {
        // TODO: update the code to test the property pnl
        expect(instance).to.have.property('pnl');
        // expect(instance.pnl).to.be(expectedValueLiteral);
      });

    });
  });

}));
