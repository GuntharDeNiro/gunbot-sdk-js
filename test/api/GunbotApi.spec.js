/*
 * Gunbot REST API
 * The Gunbot REST API enables you to programmatically interact with Gunbot, a self hosted trading bot for crypto, ETFs and stocks, allowing automation and integration with your own applications and services. It gives you a single API with which you can control trading operations on many exchanges.  The API accepts and returns data in JSON format. It uses standard HTTP response codes to indicate request outcomes: - **200 OK**: The request was successful. - **400 Bad Request**: The request was invalid or cannot be processed. - **401 Unauthorized**: Authentication failed, or the user lacks necessary permissions. - **500 Internal Server Error**: A server-side error occurred.  **Gunbot Workflow:** To automate trading for any pair using the API, follow these steps: 1. Add the trading pair to the configuration with a valid strategy. 2. Start the core to activate trading operations. After completing these steps, you can access API endpoints for market data and trading actions. Gunbot will actively monitor and execute strategies for the specified pairs.  **Encryption Helpers:** Gunbot uses password encryption. Refer to the original documentation for encryption helper snippets in JavaScript (Browser/Node.js), Bash, and Python. 
 *
 * OpenAPI spec version: v1
 * Contact: support@gunbot.freshdesk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GunbotRestApi);
  }
}(this, function(expect, GunbotRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GunbotRestApi.GunbotApi();
  });

  describe('(package)', function() {
    describe('GunbotApi', function() {
      describe('assetsTotal', function() {
        it('should call assetsTotal successfully', function(done) {
          // TODO: uncomment, update parameter values for assetsTotal call and complete the assertions
          /*

          instance.assetsTotal(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.AssetsTotalResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('authLogin', function() {
        it('should call authLogin successfully', function(done) {
          // TODO: uncomment, update parameter values for authLogin call and complete the assertions
          /*

          instance.authLogin(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.LoginResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('authStatus', function() {
        it('should call authStatus successfully', function(done) {
          // TODO: uncomment authStatus call and complete the assertions
          /*

          instance.authStatus(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.AuthStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('balances', function() {
        it('should call balances successfully', function(done) {
          // TODO: uncomment balances call and complete the assertions
          /*

          instance.balances(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.BalancesResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('chartData', function() {
        it('should call chartData successfully', function(done) {
          // TODO: uncomment, update parameter values for chartData call and complete the assertions
          /*

          instance.chartData(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.ChartDataResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('chartMarks', function() {
        it('should call chartMarks successfully', function(done) {
          // TODO: uncomment, update parameter values for chartMarks call and complete the assertions
          /*

          instance.chartMarks(exchange, pair, interval, startTime, endTime, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.ChartMarksResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configFull', function() {
        it('should call configFull successfully', function(done) {
          // TODO: uncomment configFull call and complete the assertions
          /*

          instance.configFull(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.ConfigFullResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configPairAdd', function() {
        it('should call configPairAdd successfully', function(done) {
          // TODO: uncomment, update parameter values for configPairAdd call and complete the assertions
          /*

          instance.configPairAdd(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SuccessStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configPairRemove', function() {
        it('should call configPairRemove successfully', function(done) {
          // TODO: uncomment, update parameter values for configPairRemove call and complete the assertions
          /*

          instance.configPairRemove(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SuccessStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configStrategyAdd', function() {
        it('should call configStrategyAdd successfully', function(done) {
          // TODO: uncomment, update parameter values for configStrategyAdd call and complete the assertions
          /*

          instance.configStrategyAdd(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SuccessStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configStrategyRemove', function() {
        it('should call configStrategyRemove successfully', function(done) {
          // TODO: uncomment, update parameter values for configStrategyRemove call and complete the assertions
          /*

          instance.configStrategyRemove(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SuccessStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configUpdate', function() {
        it('should call configUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for configUpdate call and complete the assertions
          /*

          instance.configUpdate(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.ConfigUpdateResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coremem', function() {
        it('should call coremem successfully', function(done) {
          // TODO: uncomment coremem call and complete the assertions
          /*

          instance.coremem(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.CoreMemSnapshotResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('corememRequest', function() {
        it('should call corememRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for corememRequest call and complete the assertions
          /*

          instance.corememRequest(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.CoreMemRawResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('corememSingle', function() {
        it('should call corememSingle successfully', function(done) {
          // TODO: uncomment, update parameter values for corememSingle call and complete the assertions
          /*

          instance.corememSingle(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.CoreMemSnapshotResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesAcvar', function() {
        it('should call filesAcvar successfully', function(done) {
          // TODO: uncomment filesAcvar call and complete the assertions
          /*

          instance.filesAcvar(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.FileListResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesAcvarGet', function() {
        it('should call filesAcvarGet successfully', function(done) {
          // TODO: uncomment, update parameter values for filesAcvarGet call and complete the assertions
          /*

          instance.filesAcvarGet(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.FileAclarContentResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesAutoconfigWrite', function() {
        it('should call filesAutoconfigWrite successfully', function(done) {
          // TODO: uncomment, update parameter values for filesAutoconfigWrite call and complete the assertions
          /*

          instance.filesAutoconfigWrite(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SuccessStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesBackup', function() {
        it('should call filesBackup successfully', function(done) {
          // TODO: uncomment filesBackup call and complete the assertions
          /*

          instance.filesBackup(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.FileListResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesBackupGet', function() {
        it('should call filesBackupGet successfully', function(done) {
          // TODO: uncomment, update parameter values for filesBackupGet call and complete the assertions
          /*

          instance.filesBackupGet(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.FileContentResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesCustomEditorGet', function() {
        it('should call filesCustomEditorGet successfully', function(done) {
          // TODO: uncomment filesCustomEditorGet call and complete the assertions
          /*

          instance.filesCustomEditorGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesCustomEditorWrite', function() {
        it('should call filesCustomEditorWrite successfully', function(done) {
          // TODO: uncomment, update parameter values for filesCustomEditorWrite call and complete the assertions
          /*

          instance.filesCustomEditorWrite(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SuccessStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesState', function() {
        it('should call filesState successfully', function(done) {
          // TODO: uncomment filesState call and complete the assertions
          /*

          instance.filesState(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.FileListResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesStateGet', function() {
        it('should call filesStateGet successfully', function(done) {
          // TODO: uncomment, update parameter values for filesStateGet call and complete the assertions
          /*

          instance.filesStateGet(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.FileStateContentResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesStrategy', function() {
        it('should call filesStrategy successfully', function(done) {
          // TODO: uncomment filesStrategy call and complete the assertions
          /*

          instance.filesStrategy(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.FileListResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesStrategyDelete', function() {
        it('should call filesStrategyDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for filesStrategyDelete call and complete the assertions
          /*

          instance.filesStrategyDelete(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SuccessStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesStrategyGet', function() {
        it('should call filesStrategyGet successfully', function(done) {
          // TODO: uncomment, update parameter values for filesStrategyGet call and complete the assertions
          /*

          instance.filesStrategyGet(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filesStrategyWrite', function() {
        it('should call filesStrategyWrite successfully', function(done) {
          // TODO: uncomment, update parameter values for filesStrategyWrite call and complete the assertions
          /*

          instance.filesStrategyWrite(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SuccessStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('licenseKeysEdit', function() {
        it('should call licenseKeysEdit successfully', function(done) {
          // TODO: uncomment, update parameter values for licenseKeysEdit call and complete the assertions
          /*

          instance.licenseKeysEdit(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SuccessStatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('marketCandles', function() {
        it('should call marketCandles successfully', function(done) {
          // TODO: uncomment, update parameter values for marketCandles call and complete the assertions
          /*

          instance.marketCandles(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.MarketCandlesResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('marketOrderbook', function() {
        it('should call marketOrderbook successfully', function(done) {
          // TODO: uncomment, update parameter values for marketOrderbook call and complete the assertions
          /*

          instance.marketOrderbook(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.MarketOrderbookResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orders', function() {
        it('should call orders successfully', function(done) {
          // TODO: uncomment, update parameter values for orders call and complete the assertions
          /*

          instance.orders(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.OrdersResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersDay', function() {
        it('should call ordersDay successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersDay call and complete the assertions
          /*

          instance.ordersDay(timezone, keys, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.OrdersDayResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersPage', function() {
        it('should call ordersPage successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersPage call and complete the assertions
          /*

          instance.ordersPage(key, page, pageSize, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.OrdersPageResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersPageMulti', function() {
        it('should call ordersPageMulti successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersPageMulti call and complete the assertions
          /*

          instance.ordersPageMulti(keys, page, pageSize, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.OrdersPageMultiResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pairs', function() {
        it('should call pairs successfully', function(done) {
          // TODO: uncomment, update parameter values for pairs call and complete the assertions
          /*

          instance.pairs(exchange, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.PairsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pairsDetailed', function() {
        it('should call pairsDetailed successfully', function(done) {
          // TODO: uncomment, update parameter values for pairsDetailed call and complete the assertions
          /*

          instance.pairsDetailed(exchange, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.PairsDetailedResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pnlDaily', function() {
        it('should call pnlDaily successfully', function(done) {
          // TODO: uncomment, update parameter values for pnlDaily call and complete the assertions
          /*

          instance.pnlDaily(key, startTimestamp, endTimestamp, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.PnlDailyResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pnlDailyPaginated', function() {
        it('should call pnlDailyPaginated successfully', function(done) {
          // TODO: uncomment, update parameter values for pnlDailyPaginated call and complete the assertions
          /*

          instance.pnlDailyPaginated(key, pageNum, pageSize, endTime, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.PnlDailyPaginatedResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pnlOverview', function() {
        it('should call pnlOverview successfully', function(done) {
          // TODO: uncomment, update parameter values for pnlOverview call and complete the assertions
          /*

          instance.pnlOverview(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.PnlOverviewResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pnlSum', function() {
        it('should call pnlSum successfully', function(done) {
          // TODO: uncomment, update parameter values for pnlSum call and complete the assertions
          /*

          instance.pnlSum(exchange, startTimestamp, endTimestamp, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.PnlSumResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pnlTotal', function() {
        it('should call pnlTotal successfully', function(done) {
          // TODO: uncomment, update parameter values for pnlTotal call and complete the assertions
          /*

          instance.pnlTotal(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.PnlTotalResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('systemStart', function() {
        it('should call systemStart successfully', function(done) {
          // TODO: uncomment systemStart call and complete the assertions
          /*

          instance.systemStart(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SystemActionResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('systemStop', function() {
        it('should call systemStop successfully', function(done) {
          // TODO: uncomment systemStop call and complete the assertions
          /*

          instance.systemStop(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.SystemActionResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('time', function() {
        it('should call time successfully', function(done) {
          // TODO: uncomment time call and complete the assertions
          /*

          instance.time(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TimeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeBuy', function() {
        it('should call tradeBuy successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeBuy call and complete the assertions
          /*

          instance.tradeBuy(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeBuyMarket', function() {
        it('should call tradeBuyMarket successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeBuyMarket call and complete the assertions
          /*

          instance.tradeBuyMarket(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeBuyOco', function() {
        it('should call tradeBuyOco successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeBuyOco call and complete the assertions
          /*

          instance.tradeBuyOco(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeBuyStoplimit', function() {
        it('should call tradeBuyStoplimit successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeBuyStoplimit call and complete the assertions
          /*

          instance.tradeBuyStoplimit(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeBuyTrailingstop', function() {
        it('should call tradeBuyTrailingstop successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeBuyTrailingstop call and complete the assertions
          /*

          instance.tradeBuyTrailingstop(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeCancel', function() {
        it('should call tradeCancel successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeCancel call and complete the assertions
          /*

          instance.tradeCancel(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeClose', function() {
        it('should call tradeClose successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeClose call and complete the assertions
          /*

          instance.tradeClose(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeCloseMarket', function() {
        it('should call tradeCloseMarket successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeCloseMarket call and complete the assertions
          /*

          instance.tradeCloseMarket(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeSell', function() {
        it('should call tradeSell successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeSell call and complete the assertions
          /*

          instance.tradeSell(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeSellMarket', function() {
        it('should call tradeSellMarket successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeSellMarket call and complete the assertions
          /*

          instance.tradeSellMarket(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeSellOco', function() {
        it('should call tradeSellOco successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeSellOco call and complete the assertions
          /*

          instance.tradeSellOco(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeSellStoplimit', function() {
        it('should call tradeSellStoplimit successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeSellStoplimit call and complete the assertions
          /*

          instance.tradeSellStoplimit(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tradeSellTrailingstop', function() {
        it('should call tradeSellTrailingstop successfully', function(done) {
          // TODO: uncomment, update parameter values for tradeSellTrailingstop call and complete the assertions
          /*

          instance.tradeSellTrailingstop(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GunbotRestApi.TradeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
