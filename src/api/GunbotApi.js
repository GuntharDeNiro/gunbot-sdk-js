/*
 * Gunbot SDK JS
 * The Gunbot SDK JS enables you to programmatically interact with Gunbot, a self-hosted trading bot for crypto, ETFs and stocks.  It's a single API client with which you can control automated trading operations on many exchanges. Gunbot includes unique built-in strategies, it can also run custom strategy code in js. This client lets you orchestrate and monitor trading bots.  The API client accepts and returns data in JSON format.  It uses standard HTTP response codes to indicate request outcomes:  - **200 OK** – The request was successful   - **400 Bad Request** – The request was invalid or cannot be processed   - **401 Unauthorized** – Authentication failed or the user lacks permissions   - **500 Internal Server Error** – A server-side error occurred    **Gunbot Workflow**  1. Add the trading pair to the configuration with a valid strategy.   2. Start the core to activate trading operations.    After completing these steps you can access market-data and trading endpoints. Gunbot will actively monitor and execute strategies for the specified pairs.  **Encryption Helpers**  Gunbot uses password encryption. Refer to the original documentation for helper snippets in JavaScript (Browser/Node.js), Bash and Python.  **Supported Exchanges**  Gunbot ships with native connectors for more than two dozen exchanges, covering spot, futures and on-chain derivatives.   | Exchange | Spot | Futures / Perps | DeFi (on-chain) | Extra notes | | --- | :---: | :---: | :---: | --- | | **Binance** | ✔️ | ✔️ (USD-M & COIN-M) |  | Largest liquidity | | **Binance US** | ✔️ |  |  | US-regulated arm | | **Bitget** | ✔️ | ✔️ (USDT & UM perps) |  |  | | **Bybit** | ✔️ | ✔️ (USDT & inverse perps) |  |  | | **OKX** | ✔️ | ✔️ (Perps & dated futures) |  |  | | **Kraken** | ✔️ | ✔️ (via Kraken Futures) |  |  | | **KuCoin** | ✔️ |  |  |  | | **Gate.io** | ✔️ |  |  |  | | **MEXC** | ✔️ |  |  |  | | **BingX** | ✔️ |  |  |  | | **Crypto.com** | ✔️ |  |  |  | | **Huobi Global** | ✔️ |  |  |  | | **Bitfinex** | ✔️ |  |  |  | | **HitBTC** | ✔️ |  |  |  | | **Coinbase Advanced Trade** | ✔️ |  |  | Former Coinbase Pro | | **CEX.io** | ✔️ |  |  |  | | **Poloniex** | ✔️ |  |  |  | | **Alpaca** (stocks & crypto) | ✔️ |  |  |  | | **dYdX (v3/v4)** |  | ✔️ | ✔️ | Perpetual DEX | | **HyperLiquid** | ✔️ | ✔️ | ✔️ | DeFi perps | | **PancakeSwap** |  | ✔️ | ✔️ | BSC DEX | | **Bitmex / Bitmex Testnet** |  | ✔️ |  |  |
 *
 * OpenAPI spec version: v1
 * Contact: support@gunbot.freshdesk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient.js";
import AssetsTotalRequest from '../model/AssetsTotalRequest.js';
import AssetsTotalResponse from '../model/AssetsTotalResponse.js';
import AuthStatusResponse from '../model/AuthStatusResponse.js';
import BalancesResponse from '../model/BalancesResponse.js';
import ChartDataRequest from '../model/ChartDataRequest.js';
import ChartDataResponse from '../model/ChartDataResponse.js';
import ChartMarksResponse from '../model/ChartMarksResponse.js';
import ConfigFullResponse from '../model/ConfigFullResponse.js';
import ConfigPairAddRequest from '../model/ConfigPairAddRequest.js';
import ConfigPairRemoveRequest from '../model/ConfigPairRemoveRequest.js';
import ConfigStrategyAddRequest from '../model/ConfigStrategyAddRequest.js';
import ConfigStrategyRemoveRequest from '../model/ConfigStrategyRemoveRequest.js';
import ConfigUpdateRequest from '../model/ConfigUpdateRequest.js';
import ConfigUpdateResponse from '../model/ConfigUpdateResponse.js';
import CoreMemRawRequest from '../model/CoreMemRawRequest.js';
import CoreMemRawResponse from '../model/CoreMemRawResponse.js';
import CoreMemSingleRequest from '../model/CoreMemSingleRequest.js';
import CoreMemSnapshotResponse from '../model/CoreMemSnapshotResponse.js';
import ErrorResponse from '../model/ErrorResponse.js';
import FileAclarContentResponse from '../model/FileAclarContentResponse.js';
import FileContentResponse from '../model/FileContentResponse.js';
import FileGetRequest from '../model/FileGetRequest.js';
import FileListResponse from '../model/FileListResponse.js';
import FileStateContentResponse from '../model/FileStateContentResponse.js';
import FileStrategyWriteRequest from '../model/FileStrategyWriteRequest.js';
import FileWriteRequest from '../model/FileWriteRequest.js';
import LicenseKeysEditRequest from '../model/LicenseKeysEditRequest.js';
import LoginRequest from '../model/LoginRequest.js';
import LoginResponse from '../model/LoginResponse.js';
import MarketCandlesResponse from '../model/MarketCandlesResponse.js';
import MarketOrderbookResponse from '../model/MarketOrderbookResponse.js';
import OrdersDayResponse from '../model/OrdersDayResponse.js';
import OrdersPageMultiResponse from '../model/OrdersPageMultiResponse.js';
import OrdersPageResponse from '../model/OrdersPageResponse.js';
import OrdersResponse from '../model/OrdersResponse.js';
import PairsDetailedResponse from '../model/PairsDetailedResponse.js';
import PairsResponse from '../model/PairsResponse.js';
import PnlDailyPaginatedResponse from '../model/PnlDailyPaginatedResponse.js';
import PnlDailyResponse from '../model/PnlDailyResponse.js';
import PnlOverviewRequest from '../model/PnlOverviewRequest.js';
import PnlOverviewResponse from '../model/PnlOverviewResponse.js';
import PnlSumResponse from '../model/PnlSumResponse.js';
import PnlTotalResponse from '../model/PnlTotalResponse.js';
import SuccessStatusResponse from '../model/SuccessStatusResponse.js';
import SystemActionResponse from '../model/SystemActionResponse.js';
import TimeResponse from '../model/TimeResponse.js';
import TradeCancelRequest from '../model/TradeCancelRequest.js';
import TradeCloseLimitRequest from '../model/TradeCloseLimitRequest.js';
import TradeCloseMarketRequest from '../model/TradeCloseMarketRequest.js';
import TradeLimitOrderRequest from '../model/TradeLimitOrderRequest.js';
import TradeMarketOrderRequest from '../model/TradeMarketOrderRequest.js';
import TradeOcoRequest from '../model/TradeOcoRequest.js';
import TradeResponse from '../model/TradeResponse.js';
import TradeStopLimitRequest from '../model/TradeStopLimitRequest.js';
import TradeTrailingStopRequest from '../model/TradeTrailingStopRequest.js';

/**
* Gunbot service.
* @module api/GunbotApi
* @version v1
*/
export default class GunbotApi {

    /**
    * Constructs a new GunbotApi. 
    * @alias module:api/GunbotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the assetsTotal operation.
     * @callback moduleapi/GunbotApi~assetsTotalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetsTotalResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * assetsTotal — Get Historical Total Asset Value
     * Retrieve historical total asset value in a base currency over a time range.
     * @param {module:model/AssetsTotalRequest} body 
     * @param {module:api/GunbotApi~assetsTotalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    assetsTotal(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assetsTotal");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetsTotalResponse;

      return this.apiClient.callApi(
        '/assets/total', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authLogin operation.
     * @callback moduleapi/GunbotApi~authLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authLogin — Login User
     * Authenticate a user and obtain a JSON Web Token (JWT).
     * @param {module:model/LoginRequest} body 
     * @param {module:api/GunbotApi~authLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    authLogin(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authLogin");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginResponse;

      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authStatus operation.
     * @callback moduleapi/GunbotApi~authStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authStatus — Get Authentication Status
     * Validate the current session&#x27;s authentication status using the provided token.
     * @param {module:api/GunbotApi~authStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    authStatus(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthStatusResponse;

      return this.apiClient.callApi(
        '/auth/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the balances operation.
     * @callback moduleapi/GunbotApi~balancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BalancesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * balances — Get Asset Balances
     * Retrieve asset balances across exchanges for the authenticated user.
     * @param {module:api/GunbotApi~balancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    balances(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BalancesResponse;

      return this.apiClient.callApi(
        '/balances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the chartData operation.
     * @callback moduleapi/GunbotApi~chartDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartDataResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * chartData — Get Chart Data (Candles and Indicators)
     * Retrieve chart data, including candles and indicators, for a specific trading pair.
     * @param {module:model/ChartDataRequest} body 
     * @param {module:api/GunbotApi~chartDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    chartData(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling chartData");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChartDataResponse;

      return this.apiClient.callApi(
        '/chart/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the chartMarks operation.
     * @callback moduleapi/GunbotApi~chartMarksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartMarksResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * chartMarks — Get Chart Timescale Marks
     * Retrieve chart timescale marks (annotations like buy/sell triggers) for a pair and interval.
     * @param {String} exchange 
     * @param {String} pair 
     * @param {String} interval Time interval in minutes.
     * @param {String} startTime Start time (UNIX timestamp seconds).
     * @param {String} endTime End time (UNIX timestamp seconds).
     * @param {module:api/GunbotApi~chartMarksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    chartMarks(exchange, pair, interval, startTime, endTime, callback) {
      
      let postBody = null;
      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling chartMarks");
      }
      // verify the required parameter 'pair' is set
      if (pair === undefined || pair === null) {
        throw new Error("Missing the required parameter 'pair' when calling chartMarks");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling chartMarks");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling chartMarks");
      }
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling chartMarks");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'exchange': exchange,'pair': pair,'interval': interval,'startTime': startTime,'endTime': endTime
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartMarksResponse;

      return this.apiClient.callApi(
        '/chart/marks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the configFull operation.
     * @callback moduleapi/GunbotApi~configFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigFullResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * configFull — Get Full Configuration
     * Retrieve the entire application configuration.
     * @param {module:api/GunbotApi~configFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    configFull(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigFullResponse;

      return this.apiClient.callApi(
        '/config/full', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the configPairAdd operation.
     * @callback moduleapi/GunbotApi~configPairAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * configPairAdd — Add Trading Pair to Configuration
     * Add a new trading pair to the configuration.
     * @param {module:model/ConfigPairAddRequest} body 
     * @param {module:api/GunbotApi~configPairAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    configPairAdd(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configPairAdd");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatusResponse;

      return this.apiClient.callApi(
        '/config/pair/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the configPairRemove operation.
     * @callback moduleapi/GunbotApi~configPairRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * configPairRemove — Remove Trading Pair from Configuration
     * Remove a trading pair from the configuration.
     * @param {module:model/ConfigPairRemoveRequest} body 
     * @param {module:api/GunbotApi~configPairRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    configPairRemove(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configPairRemove");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatusResponse;

      return this.apiClient.callApi(
        '/config/pair/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the configStrategyAdd operation.
     * @callback moduleapi/GunbotApi~configStrategyAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * configStrategyAdd — Add Trading Strategy to Configuration
     * Add a new trading strategy to the configuration.
     * @param {module:model/ConfigStrategyAddRequest} body 
     * @param {module:api/GunbotApi~configStrategyAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    configStrategyAdd(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configStrategyAdd");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatusResponse;

      return this.apiClient.callApi(
        '/config/strategy/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the configStrategyRemove operation.
     * @callback moduleapi/GunbotApi~configStrategyRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * configStrategyRemove — Remove Trading Strategy from Configuration
     * Remove a trading strategy from the configuration.
     * @param {module:model/ConfigStrategyRemoveRequest} body 
     * @param {module:api/GunbotApi~configStrategyRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    configStrategyRemove(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configStrategyRemove");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatusResponse;

      return this.apiClient.callApi(
        '/config/strategy/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the configUpdate operation.
     * @callback moduleapi/GunbotApi~configUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigUpdateResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * configUpdate — Update Full Configuration
     * Update the entire configuration with a new object.
     * @param {module:model/ConfigUpdateRequest} body 
     * @param {module:api/GunbotApi~configUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    configUpdate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configUpdate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigUpdateResponse;

      return this.apiClient.callApi(
        '/config/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the coremem operation.
     * @callback moduleapi/GunbotApi~corememCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CoreMemSnapshotResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * coremem — Get Core Memory Snapshot (All Pairs)
     * Retrieve a snapshot of relevant core memory data for all active trading pairs. Data is slightly delayed and transformed for frontend use.
     * @param {module:api/GunbotApi~corememCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    coremem(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CoreMemSnapshotResponse;

      return this.apiClient.callApi(
        '/coremem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the corememRequest operation.
     * @callback moduleapi/GunbotApi~corememRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CoreMemRawResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * corememRequest — Get Raw Core Memory Data for a Pair
     * Retrieve raw core memory data for a specific trading pair, optionally filtered by elements.
     * @param {module:model/CoreMemRawRequest} body 
     * @param {module:api/GunbotApi~corememRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    corememRequest(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling corememRequest");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CoreMemRawResponse;

      return this.apiClient.callApi(
        '/coremem/raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the corememSingle operation.
     * @callback moduleapi/GunbotApi~corememSingleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CoreMemSnapshotResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * corememSingle — Get Core Memory Snapshot (Single Pair)
     * Retrieve a snapshot of relevant core memory data for a single active trading pair. Data is slightly delayed and transformed.
     * @param {module:model/CoreMemSingleRequest} body 
     * @param {module:api/GunbotApi~corememSingleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    corememSingle(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling corememSingle");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CoreMemSnapshotResponse;

      return this.apiClient.callApi(
        '/coremem/single', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesAcvar operation.
     * @callback moduleapi/GunbotApi~filesAcvarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileListResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesAcvar — List AutoConfig Variable Files
     * List filenames of available AutoConfig variable files.
     * @param {module:api/GunbotApi~filesAcvarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesAcvar(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileListResponse;

      return this.apiClient.callApi(
        '/files/acvar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesAcvarGet operation.
     * @callback moduleapi/GunbotApi~filesAcvarGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileAclarContentResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesAcvarGet — Get AutoConfig Variable File Content
     * Retrieve the content of a specified AutoConfig variable file.
     * @param {Object} opts Optional parameters
     * @param {module:model/FileGetRequest} opts.body 
     * @param {module:api/GunbotApi~filesAcvarGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesAcvarGet(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileAclarContentResponse;

      return this.apiClient.callApi(
        '/files/acvar/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesAutoconfigWrite operation.
     * @callback moduleapi/GunbotApi~filesAutoconfigWriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesAutoconfigWrite — Write to autoconfig.json File
     * Write content to the &#x60;autoconfig.json&#x60; file.
     * @param {module:model/FileWriteRequest} body 
     * @param {module:api/GunbotApi~filesAutoconfigWriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesAutoconfigWrite(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesAutoconfigWrite");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatusResponse;

      return this.apiClient.callApi(
        '/files/autoconfig/write', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesBackup operation.
     * @callback moduleapi/GunbotApi~filesBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileListResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesBackup — List Backup Files
     * List available backup files.
     * @param {module:api/GunbotApi~filesBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesBackup(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileListResponse;

      return this.apiClient.callApi(
        '/files/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesBackupGet operation.
     * @callback moduleapi/GunbotApi~filesBackupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileContentResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesBackupGet — Get Backup File Content
     * Retrieve the content of a specified backup config file.
     * @param {module:model/FileGetRequest} body 
     * @param {module:api/GunbotApi~filesBackupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesBackupGet(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesBackupGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileContentResponse;

      return this.apiClient.callApi(
        '/files/backup/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesCustomEditorGet operation.
     * @callback moduleapi/GunbotApi~filesCustomEditorGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesCustomEditorGet — Get Custom Strategy Editor File Content
     * Retrieve the content of the custom strategy editor file.
     * @param {module:api/GunbotApi~filesCustomEditorGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesCustomEditorGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/files/custom-editor/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesCustomEditorWrite operation.
     * @callback moduleapi/GunbotApi~filesCustomEditorWriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesCustomEditorWrite — Write to Custom Strategy Editor File
     * Write content to the custom strategy editor file.
     * @param {module:model/FileWriteRequest} body 
     * @param {module:api/GunbotApi~filesCustomEditorWriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesCustomEditorWrite(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesCustomEditorWrite");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatusResponse;

      return this.apiClient.callApi(
        '/files/custom-editor/write', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesState operation.
     * @callback moduleapi/GunbotApi~filesStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileListResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesState — List State Files
     * List filenames of available state files.
     * @param {module:api/GunbotApi~filesStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesState(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileListResponse;

      return this.apiClient.callApi(
        '/files/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesStateGet operation.
     * @callback moduleapi/GunbotApi~filesStateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileStateContentResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesStateGet — Get State File Content
     * Retrieve the content of a specific state file.
     * @param {module:model/FileGetRequest} body 
     * @param {module:api/GunbotApi~filesStateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesStateGet(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesStateGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileStateContentResponse;

      return this.apiClient.callApi(
        '/files/state/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesStrategy operation.
     * @callback moduleapi/GunbotApi~filesStrategyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileListResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesStrategy — List Custom Strategy Files
     * List filenames of available custom strategy files (JavaScript files).
     * @param {module:api/GunbotApi~filesStrategyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesStrategy(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileListResponse;

      return this.apiClient.callApi(
        '/files/strategy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesStrategyDelete operation.
     * @callback moduleapi/GunbotApi~filesStrategyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesStrategyDelete — Delete Custom Strategy File
     * Delete a specific custom strategy file.
     * @param {module:model/FileGetRequest} body 
     * @param {module:api/GunbotApi~filesStrategyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesStrategyDelete(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesStrategyDelete");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatusResponse;

      return this.apiClient.callApi(
        '/files/strategy/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesStrategyGet operation.
     * @callback moduleapi/GunbotApi~filesStrategyGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesStrategyGet — Get Custom Strategy File Content
     * Retrieve the content of a specific custom strategy file. The response is the raw content of the file, likely JavaScript code, wrapped in a JSON object.
     * @param {module:model/FileGetRequest} body 
     * @param {module:api/GunbotApi~filesStrategyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesStrategyGet(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesStrategyGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/files/strategy/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesStrategyWrite operation.
     * @callback moduleapi/GunbotApi~filesStrategyWriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filesStrategyWrite — Write to Custom Strategy File
     * Write JavaScript code content to a specific custom strategy file.
     * @param {module:model/FileStrategyWriteRequest} body 
     * @param {module:api/GunbotApi~filesStrategyWriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filesStrategyWrite(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesStrategyWrite");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatusResponse;

      return this.apiClient.callApi(
        '/files/strategy/write', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the licenseKeysEdit operation.
     * @callback moduleapi/GunbotApi~licenseKeysEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * licenseKeysEdit — Edit License Keys
     * Edit license keys for a wallet, optionally verifying with an exchange.
     * @param {module:model/LicenseKeysEditRequest} body 
     * @param {module:api/GunbotApi~licenseKeysEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    licenseKeysEdit(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling licenseKeysEdit");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatusResponse;

      return this.apiClient.callApi(
        '/license/keys/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the marketCandles operation.
     * @callback moduleapi/GunbotApi~marketCandlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketCandlesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * marketCandles — Get Market Candles (OHLCV)
     * Retrieve historical OHLCV candle data for a trading pair. The &#x60;key&#x60; parameter (exchange/pair) must be URL-encoded.
     * @param {String} key URL-encoded trading pair key (e.g., &#x60;binance%2FUSDT-PEPE&#x60;).
     * @param {module:api/GunbotApi~marketCandlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    marketCandles(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling marketCandles");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketCandlesResponse;

      return this.apiClient.callApi(
        '/market/candles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the marketOrderbook operation.
     * @callback moduleapi/GunbotApi~marketOrderbookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketOrderbookResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * marketOrderbook — Get Market Orderbook
     * Retrieve current order book (bids and asks) for a trading pair. The &#x60;key&#x60; parameter must be URL-encoded.
     * @param {String} key URL-encoded trading pair key (e.g., &#x60;binance%2FUSDT-PEPE&#x60;).
     * @param {module:api/GunbotApi~marketOrderbookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    marketOrderbook(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling marketOrderbook");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketOrderbookResponse;

      return this.apiClient.callApi(
        '/market/orderbook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the orders operation.
     * @callback moduleapi/GunbotApi~ordersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * orders — Get Order History for a Pair
     * Retrieve locally stored order history for a trading pair. The &#x60;key&#x60; parameter must be URL-encoded.
     * @param {String} key URL-encoded exchange/pair key (e.g., &#x60;binance%2FUSDT-XRP&#x60;).
     * @param {module:api/GunbotApi~ordersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    orders(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling orders");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersResponse;

      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the ordersDay operation.
     * @callback moduleapi/GunbotApi~ordersDayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersDayResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ordersDay — Get Orders for Current Day (Multiple Pairs)
     * Retrieve orders from the current day for multiple trading pairs. Individual keys in &#x60;keys[]&#x60; array must be URL-encoded if they contain special characters.
     * @param {String} timezone IANA timezone (e.g., &#x60;America/New_York&#x60;).
     * @param {Array.<String>} keys Array of exchange/pair keys. Each key should be URL-encoded if needed.
     * @param {module:api/GunbotApi~ordersDayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    ordersDay(timezone, keys, callback) {
      
      let postBody = null;
      // verify the required parameter 'timezone' is set
      if (timezone === undefined || timezone === null) {
        throw new Error("Missing the required parameter 'timezone' when calling ordersDay");
      }
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling ordersDay");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'timezone': timezone,'keys[]': this.apiClient.buildCollectionParam(keys, 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersDayResponse;

      return this.apiClient.callApi(
        '/orders/day', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the ordersPage operation.
     * @callback moduleapi/GunbotApi~ordersPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersPageResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ordersPage — Get Paginated Orders for a Pair
     * Retrieve paginated orders for a trading pair. The &#x60;key&#x60; parameter must be URL-encoded.
     * @param {String} key URL-encoded exchange/pair key.
     * @param {Number} page Page number (0-indexed).
     * @param {Number} pageSize Records per page.
     * @param {module:api/GunbotApi~ordersPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    ordersPage(key, page, pageSize, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling ordersPage");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling ordersPage");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling ordersPage");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'key': key,'page': page,'pageSize': pageSize
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersPageResponse;

      return this.apiClient.callApi(
        '/orders/page', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the ordersPageMulti operation.
     * @callback moduleapi/GunbotApi~ordersPageMultiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersPageMultiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ordersPageMulti — Get Paginated Orders (Multiple Pairs)
     * Retrieve paginated orders for multiple trading pairs. Individual keys in &#x60;keys[]&#x60; array must be URL-encoded if needed.
     * @param {Array.<String>} keys Array of exchange/pair keys. Each key should be URL-encoded if needed.
     * @param {Number} page Page number (0-indexed).
     * @param {Number} pageSize Records per page.
     * @param {module:api/GunbotApi~ordersPageMultiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    ordersPageMulti(keys, page, pageSize, callback) {
      
      let postBody = null;
      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling ordersPageMulti");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling ordersPageMulti");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling ordersPageMulti");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'keys[]': this.apiClient.buildCollectionParam(keys, 'multi'),'page': page,'pageSize': pageSize
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersPageMultiResponse;

      return this.apiClient.callApi(
        '/orders/page/multi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pairs operation.
     * @callback moduleapi/GunbotApi~pairsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PairsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pairs — Get Trading Pairs
     * Retrieve a list of trading pairs for a specified exchange. The &#x60;exchange&#x60; parameter should be URL-encoded if it contains special characters (e.g., &#x60;#&#x60; as &#x60;%23&#x60;).
     * @param {String} exchange Exchange name (e.g., &#x60;binance%233&#x60;).
     * @param {module:api/GunbotApi~pairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pairs(exchange, callback) {
      
      let postBody = null;
      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling pairs");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'exchange': exchange
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PairsResponse;

      return this.apiClient.callApi(
        '/pairs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pairsDetailed operation.
     * @callback moduleapi/GunbotApi~pairsDetailedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PairsDetailedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pairsDetailed — Get Detailed Trading Pairs
     * Retrieve detailed trading pair information for a specified exchange. The &#x60;exchange&#x60; parameter should be URL-encoded if it contains special characters.
     * @param {String} exchange Exchange name (e.g., &#x60;binance%233&#x60;).
     * @param {module:api/GunbotApi~pairsDetailedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pairsDetailed(exchange, callback) {
      
      let postBody = null;
      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling pairsDetailed");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'exchange': exchange
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PairsDetailedResponse;

      return this.apiClient.callApi(
        '/pairs/detailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pnlDaily operation.
     * @callback moduleapi/GunbotApi~pnlDailyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PnlDailyResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pnlDaily — Get Daily PNL for a Trading Key
     * Retrieve daily PNL data for a specific trading key within a time range. The &#x60;key&#x60; parameter must be URL-encoded.
     * @param {String} key URL-encoded trading key (e.g. &#x60;binance%2FUSDT-XRP&#x60;).
     * @param {Number} startTimestamp Start timestamp (ms).
     * @param {Number} endTimestamp End timestamp (ms).
     * @param {module:api/GunbotApi~pnlDailyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pnlDaily(key, startTimestamp, endTimestamp, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling pnlDaily");
      }
      // verify the required parameter 'startTimestamp' is set
      if (startTimestamp === undefined || startTimestamp === null) {
        throw new Error("Missing the required parameter 'startTimestamp' when calling pnlDaily");
      }
      // verify the required parameter 'endTimestamp' is set
      if (endTimestamp === undefined || endTimestamp === null) {
        throw new Error("Missing the required parameter 'endTimestamp' when calling pnlDaily");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'key': key,'startTimestamp': startTimestamp,'endTimestamp': endTimestamp
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PnlDailyResponse;

      return this.apiClient.callApi(
        '/pnl/daily', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pnlDailyPaginated operation.
     * @callback moduleapi/GunbotApi~pnlDailyPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PnlDailyPaginatedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pnlDailyPaginated — Get Paginated Daily PNL for a Trading Key
     * Retrieve paginated daily PNL data for a specific trading key. The &#x60;key&#x60; parameter must be URL-encoded.
     * @param {String} key URL-encoded trading key.
     * @param {Number} pageNum Page number.
     * @param {Number} pageSize Records per page.
     * @param {Number} endTime End timestamp (ms).
     * @param {module:api/GunbotApi~pnlDailyPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pnlDailyPaginated(key, pageNum, pageSize, endTime, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling pnlDailyPaginated");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling pnlDailyPaginated");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling pnlDailyPaginated");
      }
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling pnlDailyPaginated");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'key': key,'pageNum': pageNum,'pageSize': pageSize,'endTime': endTime
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PnlDailyPaginatedResponse;

      return this.apiClient.callApi(
        '/pnl/daily/paginated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pnlOverview operation.
     * @callback moduleapi/GunbotApi~pnlOverviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PnlOverviewResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pnlOverview — Get PNL Overview
     * Retrieve an overview of PNL data, summarized over time periods and trading pairs.
     * @param {module:model/PnlOverviewRequest} body 
     * @param {module:api/GunbotApi~pnlOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pnlOverview(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pnlOverview");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PnlOverviewResponse;

      return this.apiClient.callApi(
        '/pnl/overview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pnlSum operation.
     * @callback moduleapi/GunbotApi~pnlSumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PnlSumResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pnlSum — Get PNL Sum for an Exchange Key
     * Retrieve total PNL sum and investment for an exchange key over a time range. The &#x60;exchange&#x60; parameter (exchange key) must be URL-encoded.
     * @param {String} exchange URL-encoded exchange key (e.g. &#x60;binance%2FUSDT-XRP&#x60;).
     * @param {Number} startTimestamp Start timestamp (ms).
     * @param {Number} endTimestamp End timestamp (ms).
     * @param {module:api/GunbotApi~pnlSumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pnlSum(exchange, startTimestamp, endTimestamp, callback) {
      
      let postBody = null;
      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling pnlSum");
      }
      // verify the required parameter 'startTimestamp' is set
      if (startTimestamp === undefined || startTimestamp === null) {
        throw new Error("Missing the required parameter 'startTimestamp' when calling pnlSum");
      }
      // verify the required parameter 'endTimestamp' is set
      if (endTimestamp === undefined || endTimestamp === null) {
        throw new Error("Missing the required parameter 'endTimestamp' when calling pnlSum");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'exchange': exchange,'startTimestamp': startTimestamp,'endTimestamp': endTimestamp
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PnlSumResponse;

      return this.apiClient.callApi(
        '/pnl/sum', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pnlTotal operation.
     * @callback moduleapi/GunbotApi~pnlTotalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PnlTotalResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pnlTotal — Get Total PNL for a Trading Key
     * Retrieve total PNL for a specific trading key. The &#x60;key&#x60; parameter must be URL-encoded.
     * @param {String} key URL-encoded trading key.
     * @param {module:api/GunbotApi~pnlTotalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pnlTotal(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling pnlTotal");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PnlTotalResponse;

      return this.apiClient.callApi(
        '/pnl/total', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the systemStart operation.
     * @callback moduleapi/GunbotApi~systemStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemActionResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * systemStart — Start System
     * Start the Gunbot system. Returns current configuration without private keys.
     * @param {module:api/GunbotApi~systemStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    systemStart(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemActionResponse;

      return this.apiClient.callApi(
        '/system/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the systemStop operation.
     * @callback moduleapi/GunbotApi~systemStopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemActionResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * systemStop — Stop System
     * Stop the Gunbot system. Returns current configuration without private keys.
     * @param {module:api/GunbotApi~systemStopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    systemStop(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemActionResponse;

      return this.apiClient.callApi(
        '/system/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the time operation.
     * @callback moduleapi/GunbotApi~timeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * time — Get Server Time
     * Retrieve the current server time in milliseconds since Unix epoch.
     * @param {module:api/GunbotApi~timeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    time(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeResponse;

      return this.apiClient.callApi(
        '/time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeBuy operation.
     * @callback moduleapi/GunbotApi~tradeBuyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeBuy — Place Limit Buy Order
     * Place a limit buy order.
     * @param {module:model/TradeLimitOrderRequest} body 
     * @param {module:api/GunbotApi~tradeBuyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeBuy(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeBuy");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/buy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeBuyMarket operation.
     * @callback moduleapi/GunbotApi~tradeBuyMarketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeBuyMarket — Place Market Buy Order
     * Place a market buy order.
     * @param {module:model/TradeMarketOrderRequest} body 
     * @param {module:api/GunbotApi~tradeBuyMarketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeBuyMarket(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeBuyMarket");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/buy/market', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeBuyOco operation.
     * @callback moduleapi/GunbotApi~tradeBuyOcoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeBuyOco — Place OCO Buy Order (Binance)
     * Place an OCO (One-Cancels-the-Other) buy order on Binance.
     * @param {module:model/TradeOcoRequest} body 
     * @param {module:api/GunbotApi~tradeBuyOcoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeBuyOco(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeBuyOco");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/buy/oco', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeBuyStoplimit operation.
     * @callback moduleapi/GunbotApi~tradeBuyStoplimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeBuyStoplimit — Place Stop-Limit Buy Order (Binance)
     * Place a stop-limit buy order on Binance.
     * @param {module:model/TradeStopLimitRequest} body 
     * @param {module:api/GunbotApi~tradeBuyStoplimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeBuyStoplimit(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeBuyStoplimit");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/buy/stoplimit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeBuyTrailingstop operation.
     * @callback moduleapi/GunbotApi~tradeBuyTrailingstopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeBuyTrailingstop — Place Trailing Stop Buy Order (Binance)
     * Place a trailing stop buy order on Binance. &#x60;price&#x60; is the reference price.
     * @param {module:model/TradeTrailingStopRequest} body 
     * @param {module:api/GunbotApi~tradeBuyTrailingstopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeBuyTrailingstop(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeBuyTrailingstop");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/buy/trailingstop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeCancel operation.
     * @callback moduleapi/GunbotApi~tradeCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeCancel — Cancel Order
     * Cancel an existing order.
     * @param {module:model/TradeCancelRequest} body 
     * @param {module:api/GunbotApi~tradeCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeCancel(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeCancel");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeClose operation.
     * @callback moduleapi/GunbotApi~tradeCloseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeClose — Close Position with Limit Price (Bybit Futures)
     * Close an open position at a specified limit price on Bybit (futures).
     * @param {module:model/TradeCloseLimitRequest} body 
     * @param {module:api/GunbotApi~tradeCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeClose(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeClose");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeCloseMarket operation.
     * @callback moduleapi/GunbotApi~tradeCloseMarketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeCloseMarket — Close Position at Market Price (Bybit Futures)
     * Close an open position at the current market price on Bybit (futures).
     * @param {module:model/TradeCloseMarketRequest} body 
     * @param {module:api/GunbotApi~tradeCloseMarketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeCloseMarket(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeCloseMarket");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/close/market', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeSell operation.
     * @callback moduleapi/GunbotApi~tradeSellCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeSell — Place Limit Sell Order
     * Place a limit sell order.
     * @param {module:model/TradeLimitOrderRequest} body 
     * @param {module:api/GunbotApi~tradeSellCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeSell(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeSell");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/sell', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeSellMarket operation.
     * @callback moduleapi/GunbotApi~tradeSellMarketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeSellMarket — Place Market Sell Order
     * Place a market sell order.
     * @param {module:model/TradeMarketOrderRequest} body 
     * @param {module:api/GunbotApi~tradeSellMarketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeSellMarket(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeSellMarket");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/sell/market', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeSellOco operation.
     * @callback moduleapi/GunbotApi~tradeSellOcoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeSellOco — Place OCO Sell Order (Binance)
     * Place an OCO (One-Cancels-the-Other) sell order on Binance.
     * @param {module:model/TradeOcoRequest} body 
     * @param {module:api/GunbotApi~tradeSellOcoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeSellOco(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeSellOco");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/sell/oco', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeSellStoplimit operation.
     * @callback moduleapi/GunbotApi~tradeSellStoplimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeSellStoplimit — Place Stop-Limit Sell Order (Binance)
     * Place a stop-limit sell order on Binance.
     * @param {module:model/TradeStopLimitRequest} body 
     * @param {module:api/GunbotApi~tradeSellStoplimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeSellStoplimit(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeSellStoplimit");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/sell/stoplimit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tradeSellTrailingstop operation.
     * @callback moduleapi/GunbotApi~tradeSellTrailingstopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tradeSellTrailingstop — Place Trailing Stop Sell Order (Binance)
     * Place a trailing stop sell order on Binance. &#x60;price&#x60; is the reference price.
     * @param {module:model/TradeTrailingStopRequest} body 
     * @param {module:api/GunbotApi~tradeSellTrailingstopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tradeSellTrailingstop(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tradeSellTrailingstop");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TradeResponse;

      return this.apiClient.callApi(
        '/trade/sell/trailingstop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}